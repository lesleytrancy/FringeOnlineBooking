{"ast":null,"code":"export default {\n  namespaced: true,\n  state: () => ({\n    user: null,\n    token: null,\n    isAuthenticated: false\n  }),\n  mutations: {\n    SET_USER(state, user) {\n      state.user = user;\n      state.isAuthenticated = !!user;\n    },\n    SET_TOKEN(state, token) {\n      state.token = token;\n    },\n    LOGOUT(state) {\n      state.user = null;\n      state.token = null;\n      state.isAuthenticated = false;\n    }\n  },\n  actions: {\n    async login({\n      commit\n    }, {\n      email,\n      password\n    }) {\n      // TODO: Implement API call\n      const response = await fakeAuth(email, password);\n      commit('SET_USER', response.user);\n      commit('SET_TOKEN', response.token);\n      return response;\n    },\n    async register({\n      commit\n    }, userData) {\n      // TODO: Implement API call\n      const response = await fakeRegister(userData);\n      commit('SET_USER', response.user);\n      commit('SET_TOKEN', response.token);\n      return response;\n    },\n    logout({\n      commit\n    }) {\n      commit('LOGOUT');\n    }\n  },\n  getters: {\n    currentUser: state => state.user,\n    isAuthenticated: state => state.isAuthenticated\n  }\n};\n\n// Temporary mock functions\nasync function fakeAuth(email, password) {\n  return {\n    user: {\n      email,\n      name: 'Test User'\n    },\n    token: 'fake-jwt-token'\n  };\n}\nasync function fakeRegister(userData) {\n  return {\n    user: userData,\n    token: 'fake-jwt-token'\n  };\n}","map":{"version":3,"names":["namespaced","state","user","token","isAuthenticated","mutations","SET_USER","SET_TOKEN","LOGOUT","actions","login","commit","email","password","response","fakeAuth","register","userData","fakeRegister","logout","getters","currentUser","name"],"sources":["/Users/lesleytrancy/Documents/COMP9034 DevOps and Enterprise Systems Project/FringeOnlineBooking/frontend-public/src/store/modules/user.js"],"sourcesContent":["export default {\n  namespaced: true,\n  state: () => ({\n    user: null,\n    token: null,\n    isAuthenticated: false\n  }),\n  mutations: {\n    SET_USER(state, user) {\n      state.user = user\n      state.isAuthenticated = !!user\n    },\n    SET_TOKEN(state, token) {\n      state.token = token\n    },\n    LOGOUT(state) {\n      state.user = null\n      state.token = null\n      state.isAuthenticated = false\n    }\n  },\n  actions: {\n    async login({ commit }, { email, password }) {\n      // TODO: Implement API call\n      const response = await fakeAuth(email, password)\n      commit('SET_USER', response.user)\n      commit('SET_TOKEN', response.token)\n      return response\n    },\n    async register({ commit }, userData) {\n      // TODO: Implement API call\n      const response = await fakeRegister(userData)\n      commit('SET_USER', response.user)\n      commit('SET_TOKEN', response.token)\n      return response\n    },\n    logout({ commit }) {\n      commit('LOGOUT')\n    }\n  },\n  getters: {\n    currentUser: state => state.user,\n    isAuthenticated: state => state.isAuthenticated\n  }\n}\n\n// Temporary mock functions\nasync function fakeAuth(email, password) {\n  return {\n    user: { email, name: 'Test User' },\n    token: 'fake-jwt-token'\n  }\n}\n\nasync function fakeRegister(userData) {\n  return {\n    user: userData,\n    token: 'fake-jwt-token'\n  }\n}\n"],"mappings":"AAAA,eAAe;EACbA,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAEA,CAAA,MAAO;IACZC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,IAAI;IACXC,eAAe,EAAE;EACnB,CAAC,CAAC;EACFC,SAAS,EAAE;IACTC,QAAQA,CAACL,KAAK,EAAEC,IAAI,EAAE;MACpBD,KAAK,CAACC,IAAI,GAAGA,IAAI;MACjBD,KAAK,CAACG,eAAe,GAAG,CAAC,CAACF,IAAI;IAChC,CAAC;IACDK,SAASA,CAACN,KAAK,EAAEE,KAAK,EAAE;MACtBF,KAAK,CAACE,KAAK,GAAGA,KAAK;IACrB,CAAC;IACDK,MAAMA,CAACP,KAAK,EAAE;MACZA,KAAK,CAACC,IAAI,GAAG,IAAI;MACjBD,KAAK,CAACE,KAAK,GAAG,IAAI;MAClBF,KAAK,CAACG,eAAe,GAAG,KAAK;IAC/B;EACF,CAAC;EACDK,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAAEC,KAAK;MAAEC;IAAS,CAAC,EAAE;MAC3C;MACA,MAAMC,QAAQ,GAAG,MAAMC,QAAQ,CAACH,KAAK,EAAEC,QAAQ,CAAC;MAChDF,MAAM,CAAC,UAAU,EAAEG,QAAQ,CAACZ,IAAI,CAAC;MACjCS,MAAM,CAAC,WAAW,EAAEG,QAAQ,CAACX,KAAK,CAAC;MACnC,OAAOW,QAAQ;IACjB,CAAC;IACD,MAAME,QAAQA,CAAC;MAAEL;IAAO,CAAC,EAAEM,QAAQ,EAAE;MACnC;MACA,MAAMH,QAAQ,GAAG,MAAMI,YAAY,CAACD,QAAQ,CAAC;MAC7CN,MAAM,CAAC,UAAU,EAAEG,QAAQ,CAACZ,IAAI,CAAC;MACjCS,MAAM,CAAC,WAAW,EAAEG,QAAQ,CAACX,KAAK,CAAC;MACnC,OAAOW,QAAQ;IACjB,CAAC;IACDK,MAAMA,CAAC;MAAER;IAAO,CAAC,EAAE;MACjBA,MAAM,CAAC,QAAQ,CAAC;IAClB;EACF,CAAC;EACDS,OAAO,EAAE;IACPC,WAAW,EAAEpB,KAAK,IAAIA,KAAK,CAACC,IAAI;IAChCE,eAAe,EAAEH,KAAK,IAAIA,KAAK,CAACG;EAClC;AACF,CAAC;;AAED;AACA,eAAeW,QAAQA,CAACH,KAAK,EAAEC,QAAQ,EAAE;EACvC,OAAO;IACLX,IAAI,EAAE;MAAEU,KAAK;MAAEU,IAAI,EAAE;IAAY,CAAC;IAClCnB,KAAK,EAAE;EACT,CAAC;AACH;AAEA,eAAee,YAAYA,CAACD,QAAQ,EAAE;EACpC,OAAO;IACLf,IAAI,EAAEe,QAAQ;IACdd,KAAK,EAAE;EACT,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}